name: Nightly

on:
  pull_request: # FIXME: Remove before merge
    branches: [master]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: # No params

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: gear-nightly-linux-x86_64.tar.xz

          - target: x86_64-apple-darwin
            os: macOS-latest
            name: gear-nightly-macos-x86_64.tar.gz

          - target: aarch64-apple-darwin
            os: macOS-latest
            name: gear-nightly-macos-m1.tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: gear-nightly-windows-x86_64.zip

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: gear-tech/gear

      # - name: Cache
      #  uses: Swatinem/rust-cache@v1

      - name: Setup nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: Setup Rust for specified target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      # - name: Workaround with libclang.dll
      #  if: matrix.os == 'windows-latest'
      #  run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse

      # - name: Install LLVM
      #  if: matrix.os == 'windows-latest'
      #  run: choco install llvm -y

      # - name: Build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: -p gear-node --release --target ${{ matrix.target }}

      - name: Test cargo
        run: |
          cargo --version
          cargo +nightly --version

      # - name: Linux artifacts node
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     cd target/${{ matrix.target }}/release
      #     strip gear-node || true
      #     XZ_OPT=-9 tar --sort='name' -cvJf ../../../${{ matrix.name }} gear-node
      #     du -h ../../../${{ matrix.name }}

      # - name: macOS artifacts
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     cd target/${{ matrix.target }}/release
      #     strip gear-node || true
      #     tar czvf ../../../${{ matrix.name }} gear-node
      #     du -h ../../../${{ matrix.name }}

      # - name: Windows artifacts
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     cd target/${{ matrix.target }}/release
      #     strip gear-node.exe
      #     7z a ../../../${{ matrix.name }} gear-node.exe

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     path: ${{ matrix.name }}

  deploy:
    if: false # FIXME: Remove before merge
    name: Deploy binaries
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: artifact
          cname: builds.gear.rs
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      - name: Smoke test
        run: |
          sleep 60
          wget -O /dev/null "https://github.com/gear-tech/builds/blob/gh-pages/gear-nightly-windows-x86_64.zip?raw=true"
          wget -O /dev/null "https://github.com/gear-tech/builds/blob/gh-pages/gear-nightly-macos-m1.tar.gz?raw=true"
          wget -O /dev/null "https://github.com/gear-tech/builds/blob/gh-pages/gear-nightly-macos-x86_64.tar.gz?raw=true"
          wget -O /dev/null "https://github.com/gear-tech/builds/blob/gh-pages/gear-nightly-linux-x86_64.tar.xz?raw=true"
