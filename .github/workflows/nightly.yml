name: Nightly

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  NIGHTLY_TOOLCHAIN_VERSION: ${{ secrets.NIGHTLY_TOOLCHAIN_VERSION }}

jobs:
  build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            ref: master
            os: ubuntu-latest
            docker: amazonlinux:2
            name: gear-nightly-x86_64-unknown-linux-gnu
            file_name: gear-nightly-x86_64-unknown-linux-gnu.tar.xz

          - target: x86_64-apple-darwin
            ref: master
            os: macOS-latest
            name: gear-nightly-x86_64-apple-darwin
            file_name: gear-nightly-x86_64-apple-darwin.tar.xz

          - target: aarch64-apple-darwin
            ref: master
            os: macOS-latest
            name: gear-nightly-aarch64-apple-darwin
            file_name: gear-nightly-aarch64-apple-darwin.tar.xz

          - target: x86_64-pc-windows-msvc
            ref: master
            os: windows-latest
            name: gear-nightly-x86_64-pc-windows-msvc
            file_name: gear-nightly-x86_64-pc-windows-msvc.zip

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.docker }}
    continue-on-error: true
    steps:
      - name: Configure Amazon Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          yum update -y && yum install -y clang gcc git gzip make tar unzip wget xz
          wget https://cmake.org/files/v3.24/cmake-3.24.0-linux-x86_64.sh
          chmod +x cmake-3.24.0-linux-x86_64.sh
          ./cmake-3.24.0-linux-x86_64.sh --skip-license --prefix=/usr/local
          rm cmake-3.24.0-linux-x86_64.sh
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.20.2/protoc-3.20.2-linux-x86_64.zip
          unzip protoc-3.20.2-linux-x86_64.zip -d /usr/local
          rm protoc-3.20.2-linux-x86_64.zip

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: gear-tech/gear
          ref: ${{ matrix.ref }}

      - name: Add macOS ARM target
        if: matrix.target == 'aarch64-apple-darwin'
        run: sed -i '' 's/"wasm32-unknown-unknown"/"aarch64-apple-darwin", "wasm32-unknown-unknown"/g' rust-toolchain.toml

      - name: List toolchains and targets
        run: |
          rustup toolchain list
          rustup target list --installed

      - name: Install Protoc
        if: matrix.os != 'ubuntu-latest'
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fix for `git rev-parse`
        if: matrix.os == 'ubuntu-latest'
        run: git config --global --add safe.directory `pwd`

      - name: Build
        run: >
          cargo build -p gear-cli -F cli --profile production
          --target ${{ matrix.target }}

      - name: Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear || true
          ./gear --version > ../../../${{ matrix.name }}-version.txt
          XZ_OPT=-9 tar -cvJf ../../../${{ matrix.file_name }} gear
          du -h ../../../${{ matrix.file_name }}

      - name: macOS artifacts
        if: matrix.os == 'macos-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear || true
          ./gear --version > ../../../${{ matrix.name }}-version.txt || true
          tar -cvJf ../../../${{ matrix.file_name }} gear
          du -h ../../../${{ matrix.file_name }}

      - name: Windows artifacts
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear.exe
          .\gear.exe --version | Out-File -FilePath "..\..\..\${{ matrix.name }}-version.txt"
          7z a "..\..\..\${{ matrix.file_name }}" gear.exe

      - name: Upload artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: ignore
          path: |
            ${{ matrix.file_name }}
            ${{ matrix.name }}-version.txt

  deploy:
    name: Deploy binaries
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: List artifacts
        run: |
          pwd
          ls -la artifact

      - name: Deploy
        uses: dawidd6/action-ansible-playbook@v2
        with:
          directory: ansible/builds
          playbook: upload.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: -u ubuntu
          inventory: get.gear.rs
