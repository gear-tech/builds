name: Nightly

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  NIGHTLY_TOOLCHAIN_VERSION: ${{ secrets.NIGHTLY_TOOLCHAIN_VERSION }}

jobs:
  build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          # - target: x86_64-unknown-linux-gnu
          #   ref: v0.1.5
          #   os: ubuntu-latest
          #   docker: amazonlinux:2
          #   name: gear-v0.1.5-linux-x86_64
          #   file_name: gear-v0.1.5-linux-x86_64.tar.xz

          # - target: x86_64-apple-darwin
          #   ref: v0.1.5
          #   os: macOS-latest
          #   name: gear-v0.1.5-macos-x86_64
          #   file_name: gear-v0.1.5-macos-x86_64.tar.gz

          - target: aarch64-apple-darwin
            ref: v0.1.5
            os: macOS-latest
            name: gear-v0.1.5-macos-m
            file_name: gear-v0.1.5-macos-m.tar.gz

          # - target: x86_64-pc-windows-msvc
          #   ref: v0.1.5
          #   os: windows-latest
          #   name: gear-v0.1.5-windows-x86_64
          #   file_name: gear-v0.1.5-windows-x86_64.zip

          # - target: x86_64-unknown-linux-gnu
          #   ref: master
          #   os: ubuntu-latest
          #   docker: amazonlinux:2
          #   name: gear-nightly-linux-x86_64
          #   file_name: gear-nightly-linux-x86_64.tar.xz

          # - target: x86_64-apple-darwin
          #   ref: master
          #   os: macOS-latest
          #   name: gear-nightly-macos-x86_64
          #   file_name: gear-nightly-macos-x86_64.tar.gz

          # - target: aarch64-apple-darwin
          #   ref: master
          #   os: macOS-latest
          #   name: gear-nightly-macos-m
          #   file_name: gear-nightly-macos-m.tar.gz

          # - target: x86_64-pc-windows-msvc
          #   ref: master
          #   os: windows-latest
          #   name: gear-nightly-windows-x86_64
          #   file_name: gear-nightly-windows-x86_64.zip

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.docker }}
    continue-on-error: true
    steps:
      - name: Configure Amazon Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          yum update -y && yum install -y clang gcc git gzip make tar unzip wget xz
          wget https://cmake.org/files/v3.24/cmake-3.24.0-linux-x86_64.sh
          chmod +x cmake-3.24.0-linux-x86_64.sh
          ./cmake-3.24.0-linux-x86_64.sh --skip-license --prefix=/usr/local
          rm cmake-3.24.0-linux-x86_64.sh
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.20.2/protoc-3.20.2-linux-x86_64.zip
          unzip protoc-3.20.2-linux-x86_64.zip -d /usr/local
          rm protoc-3.20.2-linux-x86_64.zip

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: gear-tech/gear
          ref: ${{ matrix.ref }}

      - name: Setup nightly Wasm toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown

      - name: Install a specific nightly toolchain
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-${{ env.NIGHTLY_TOOLCHAIN_VERSION }}
          targets: wasm32-unknown-unknown
          components: llvm-tools-preview

      - name: 'Linux: Pin to the specific nightly toolchain'
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' && matrix.os == 'ubuntu-latest' }}
        run: |
          rm -rf $HOME/.rustup/toolchains/nightly-${{ matrix.target }}
          ln -vs $HOME/.rustup/toolchains/nightly-$NIGHTLY_TOOLCHAIN_VERSION-${{ matrix.target }} $HOME/.rustup/toolchains/${{ matrix.target }}

      - name: 'macOS: Pin to the specific nightly toolchain'
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' && matrix.os == 'macOS-latest' }}
        run: |
          rm -rf $HOME/.rustup/toolchains/nightly-x86_64-apple-darwin
          ln -vs $HOME/.rustup/toolchains/nightly-$NIGHTLY_TOOLCHAIN_VERSION-x86_64-apple-darwin $HOME/.rustup/toolchains/x86_64-apple-darwin

      - name: 'Windows: Pin to the specific nightly toolchain'
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' && matrix.os == 'windows-latest' }}
        run: |
          Remove-Item -Path "C:\Users\runneradmin\.rustup\toolchains\nightly-${{ matrix.target }}" -Force -Recurse
          Copy-Item -Path "C:\Users\runneradmin\.rustup\toolchains\nightly-$env:NIGHTLY_TOOLCHAIN_VERSION-${{ matrix.target }}" -Destination "C:\Users\runneradmin\.rustup\toolchains\${{ matrix.target }}" -Recurse

      - name: Setup stable toolchain for specified target and Wasm
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}, wasm32-unknown-unknown

      - name: List toolchains and targets
        run: |
          rustup toolchain list
          rustup target list --installed

      - name: Install Protoc
        if: matrix.os != 'ubuntu-latest'
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fix for `git rev-parse`
        if: matrix.os == 'ubuntu-latest'
        run: git config --global --add safe.directory `pwd`

      - name: Build
        run: >
          cargo build -p gear-cli --profile production
          --target ${{ matrix.target }}

      - name: Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear || true
          ./gear --version > ../../../${{ matrix.name }}-version.txt
          XZ_OPT=-9 tar -cvJf ../../../${{ matrix.file_name }} gear
          du -h ../../../${{ matrix.file_name }}

      - name: macOS artifacts
        if: matrix.os == 'macos-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear || true
          ./gear --version > ../../../${{ matrix.name }}-version.txt || true
          tar czvf ../../../${{ matrix.file_name }} gear
          du -h ../../../${{ matrix.file_name }}

      - name: Windows artifacts
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear.exe
          .\gear.exe --version | Out-File -FilePath "..\..\..\${{ matrix.name }}-version.txt"
          7z a "..\..\..\${{ matrix.file_name }}" gear.exe

      - name: Upload artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: ignore
          path: |
            ${{ matrix.file_name }}
            ${{ matrix.name }}-version.txt

  deploy:
    name: Deploy binaries
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Backup the old version
        run: |
          cd artifact
          ls -la
          wget -nc https://get.gear.rs/gear-nightly-linux-x86_64.tar.xz && true
          wget -nc https://get.gear.rs/gear-nightly-linux-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-nightly-macos-m.tar.gz && true
          wget -nc https://get.gear.rs/gear-nightly-macos-m-version.txt && true
          wget -nc https://get.gear.rs/gear-nightly-macos-x86_64.tar.gz && true
          wget -nc https://get.gear.rs/gear-nightly-macos-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-nightly-windows-x86_64.zip && true
          wget -nc https://get.gear.rs/gear-nightly-windows-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.5-linux-x86_64.tar.xz && true
          wget -nc https://get.gear.rs/gear-v0.1.5-linux-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.5-macos-m.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.5-macos-m-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.5-macos-x86_64.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.5-macos-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.5-windows-x86_64.zip && true
          wget -nc https://get.gear.rs/gear-v0.1.5-windows-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.4-linux-x86_64.tar.xz && true
          wget -nc https://get.gear.rs/gear-v0.1.4-linux-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.4-macos-m.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.4-macos-m-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.4-macos-x86_64.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.4-macos-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.4-windows-x86_64.zip && true
          wget -nc https://get.gear.rs/gear-v0.1.4-windows-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.3-linux-x86_64.tar.xz && true
          wget -nc https://get.gear.rs/gear-v0.1.3-linux-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.3-macos-m.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.3-macos-m-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.3-macos-x86_64.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.3-macos-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.3-windows-x86_64.zip && true
          wget -nc https://get.gear.rs/gear-v0.1.3-windows-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.2-linux-x86_64.tar.xz && true
          wget -nc https://get.gear.rs/gear-v0.1.2-linux-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.2-macos-m.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.2-macos-m-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.2-macos-x86_64.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.2-macos-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.2-windows-x86_64.zip && true
          wget -nc https://get.gear.rs/gear-v0.1.2-windows-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.1-linux-x86_64.tar.xz && true
          wget -nc https://get.gear.rs/gear-v0.1.1-linux-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.1-macos-m.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.1-macos-m-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.1-macos-x86_64.tar.gz && true
          wget -nc https://get.gear.rs/gear-v0.1.1-macos-x86_64-version.txt && true
          wget -nc https://get.gear.rs/gear-v0.1.1-windows-x86_64.zip && true
          wget -nc https://get.gear.rs/gear-v0.1.1-windows-x86_64-version.txt && true
          wget -nc https://get.gear.rs/vara-testnet-linux-x86_64.tar.xz && true
          wget -nc https://get.gear.rs/vara-testnet-linux-x86_64-version.txt && true
          wget -nc https://get.gear.rs/vara-testnet-macos-m.tar.gz && true
          wget -nc https://get.gear.rs/vara-testnet-macos-m-version.txt && true
          wget -nc https://get.gear.rs/vara-testnet-macos-x86_64.tar.gz && true
          wget -nc https://get.gear.rs/vara-testnet-macos-x86_64-version.txt && true
          wget -nc https://get.gear.rs/vara-testnet-windows-x86_64.zip && true
          wget -nc https://get.gear.rs/vara-testnet-windows-x86_64-version.txt && true

      - name: Copy Ansible playbooks
        run: cp -rvf ansible artifact/

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Render index.html
        run: cargo run

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: artifact
          cname: get.gear.rs
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      - name: Smoke test
        run: |
          sleep 60
          wget -q --spider "https://github.com/gear-tech/builds/blob/gh-pages/gear-nightly-windows-x86_64.zip?raw=true"
          wget -q --spider "https://github.com/gear-tech/builds/blob/gh-pages/gear-nightly-macos-m.tar.gz?raw=true"
          wget -q --spider "https://github.com/gear-tech/builds/blob/gh-pages/gear-nightly-macos-x86_64.tar.gz?raw=true"
          wget -q --spider "https://github.com/gear-tech/builds/blob/gh-pages/gear-nightly-linux-x86_64.tar.xz?raw=true"
