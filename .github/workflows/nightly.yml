name: Nightly

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            ref: master
            os: ubuntu-latest
            docker: ubuntu:14.04
            name: gear-nightly
            file_ext: tar.xz

          # - target: aarch64-unknown-linux-musl
          #   ref: master
          #   os: ubuntu-latest
          #   name: gear-nightly
          #   file_ext: tar.xz

          # - target: x86_64-apple-darwin
          #   ref: master
          #   os: macOS-latest
          #   name: gear-nightly
          #   file_ext: tar.xz

          # - target: aarch64-apple-darwin
          #   ref: master
          #   os: macOS-latest
          #   name: gear-nightly
          #   file_ext: tar.xz

          # - target: x86_64-pc-windows-msvc
          #   ref: master
          #   os: windows-latest
          #   name: gear-nightly
          #   file_ext: zip

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.docker }}
    continue-on-error: true
    steps:
      - name: Configure Ubuntu Linux
        if: matrix.docker == 'ubuntu:14.04'
        run: |
          apt update -y && apt upgrade -y
          apt install -y build-essential cmake curl git unzip wget
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.20.2/protoc-3.20.2-linux-x86_64.zip
          unzip protoc-3.20.2-linux-x86_64.zip -d /usr/local
          rm protoc-3.20.2-linux-x86_64.zip
          wget https://sh.rustup.rs/rustup-init.sh
          chmod +x rustup-init.sh
          ./rustup-init.sh -y
          echo "/root/.cargo/bin:$PATH" >> $GITHUB_PATH
          rustup default stable
          cargo --version
          rustc --version
          rustup update nightly && rustup target add wasm32-unknown-unknown --toolchain nightly

      - name: Checkout `gear-tech/gear`
        uses: actions/checkout@v3
        with:
          repository: gear-tech/gear
          ref: ${{ matrix.ref }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: builds

      - name: Setup toolchain on Linux
        if: matrix.os == 'ubuntu-latest' && matrix.docker != 'ubuntu:14.04'
        uses: dtolnay/rust-toolchain@stable

      - name: Add macOS ARM target
        if: matrix.target == 'aarch64-apple-darwin'
        run: sed -i '' 's/"wasm32-unknown-unknown"/"aarch64-apple-darwin", "wasm32-unknown-unknown"/g' rust-toolchain.toml

      - name: List toolchains and targets
        run: |
          rustup toolchain list
          rustup target list --installed

      - name: Install Protoc
        if: matrix.docker != 'ubuntu:14.04'
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fix for `git rev-parse`
        if: matrix.os == 'ubuntu-latest'
        run: git config --global --add safe.directory `pwd`

      - name: Build
        if: matrix.target != 'aarch64-unknown-linux-musl'
        run: >
          cargo build -p gear-cli -F cli --profile production
          --target ${{ matrix.target }}

      - name: Install cross
        if: matrix.target == 'aarch64-unknown-linux-musl'
        uses: taiki-e/install-action@cross

      - name: Build for Linux on ARM
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          cp builds/gear.diff ./
          git apply gear.diff
          cross build -p gear-cli -F cli --profile production --target ${{ matrix.target }}

      - name: Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear || true
          ./gear --version > ../../../${{ matrix.name }}-${{ matrix.target }}-version.txt || true
          XZ_OPT=-9 tar -cvJf ../../../${{ matrix.name }}-${{ matrix.target }}.${{ matrix.file_ext }} gear
          du -h ../../../${{ matrix.name }}-${{ matrix.target }}.${{ matrix.file_ext }}

      - name: macOS artifacts
        if: matrix.os == 'macos-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear || true
          ./gear --version > ../../../${{ matrix.name }}-${{ matrix.target }}-version.txt || true
          tar -cvJf ../../../${{ matrix.name }}-${{ matrix.target }}.${{ matrix.file_ext }} gear
          du -h ../../../${{ matrix.name }}-${{ matrix.target }}.${{ matrix.file_ext }}

      - name: Windows artifacts
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear.exe
          .\gear.exe --version | Out-File -FilePath "..\..\..\${{ matrix.name }}-${{ matrix.target }}-version.txt"
          7z a "..\..\..\${{ matrix.name }}-${{ matrix.target }}.${{ matrix.file_ext }}" gear.exe

      - name: Upload artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: ignore
          path: |
            ${{ matrix.name }}-${{ matrix.target }}.${{ matrix.file_ext }}
            ${{ matrix.name }}-${{ matrix.target }}-version.txt

  deploy:
    name: Deploy binaries
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: List artifacts
        run: |
          pwd
          ls -la artifact

      - name: Deploy
        uses: dawidd6/action-ansible-playbook@v2
        with:
          directory: ansible/builds
          playbook: upload.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: -u ubuntu
          inventory: get.gear.rs
