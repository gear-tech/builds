name: Nightly Vara

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: # No params

env:
  CARGO_TERM_COLOR: always
  NIGHTLY_TOOLCHAIN_VERSION: ${{ secrets.NIGHTLY_TOOLCHAIN_VERSION }}

jobs:
  build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            docker: amazonlinux:latest
            name: vara-nightly-linux-x86_64.tar.xz

          - target: x86_64-apple-darwin
            os: macOS-latest
            name: vara-nightly-macos-x86_64.tar.gz

          - target: aarch64-apple-darwin
            os: macOS-latest
            name: vara-nightly-macos-m1.tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: vara-nightly-windows-x86_64.zip

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.docker }}
    continue-on-error: true
    steps:
      - name: Configure Amazon Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          yum update -y && yum install -y amazon-linux-extras clang gcc git gzip make tar unzip wget xz
          wget https://cmake.org/files/v3.24/cmake-3.24.0-linux-x86_64.sh
          chmod +x cmake-3.24.0-linux-x86_64.sh
          ./cmake-3.24.0-linux-x86_64.sh --skip-license --prefix=/usr/local
          rm cmake-3.24.0-linux-x86_64.sh
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.20.2/protoc-3.20.2-linux-x86_64.zip
          unzip protoc-3.20.2-linux-x86_64.zip -d /usr/local
          rm protoc-3.20.2-linux-x86_64.zip

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: gear-tech/gear
          ref: vara-stage-1

      - name: Cache
        uses: Swatinem/rust-cache@v1

      - name: Setup toolchain for specified target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Setup WASM toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Setup nightly WASM toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: Install a specific nightly toolchain
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ env.NIGHTLY_TOOLCHAIN_VERSION }}
          target: wasm32-unknown-unknown
          components: llvm-tools-preview

      - name: 'macOS/Linux: Pin to the specific nightly toolchain'
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' && matrix.os != 'windows-latest' }}
        run: |
          rm -rf $HOME/.rustup/toolchains/nightly-${{ matrix.target }}
          ln -s $HOME/.rustup/toolchains/nightly-$NIGHTLY_TOOLCHAIN_VERSION-${{ matrix.target }} $HOME/.rustup/toolchains/${{ matrix.target }}

      - name: 'Windows: Pin to the specific nightly toolchain'
        if: ${{ env.NIGHTLY_TOOLCHAIN_VERSION != '' && matrix.os == 'windows-latest' }}
        run: |
          Remove-Item -Path "C:\Users\runneradmin\.rustup\toolchains\nightly-${{ matrix.target }}" -Force -Recurse
          Copy-Item -Path "C:\Users\runneradmin\.rustup\toolchains\nightly-$env:NIGHTLY_TOOLCHAIN_VERSION-${{ matrix.target }}" -Destination "C:\Users\runneradmin\.rustup\toolchains\${{ matrix.target }}" -Recurse

      - name: Install Protoc
        if: matrix.os != 'ubuntu-latest'
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fix for `git rev-parse`
        if: matrix.os == 'ubuntu-latest'
        run: git config --global --add safe.directory `pwd`

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p gear-node --profile production --no-default-features --features=vara-native,lazy-pages --target ${{ matrix.target }}

      - name: Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear-node || true
          XZ_OPT=-9 tar -cvJf ../../../${{ matrix.name }} gear-node
          du -h ../../../${{ matrix.name }}

      - name: macOS artifacts
        if: matrix.os == 'macos-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear-node || true
          tar czvf ../../../${{ matrix.name }} gear-node
          du -h ../../../${{ matrix.name }}

      - name: Windows artifacts
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/production
          strip gear-node.exe
          7z a ../../../${{ matrix.name }} gear-node.exe

      - name: Upload artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.name }}

  upload:
    name: Upload binaries
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Delete previous release
        uses: dev-drprasad/delete-tag-and-release@v0.1.3
        with:
          delete_release: true
          tag_name: vara
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delay 10s
        run: sleep 10

      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag_name: vara
          draft: false
          fail_on_unmatched_files: true
          files: artifact/*
